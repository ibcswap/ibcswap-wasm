/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Timestamp, Uint64, Uint128, Status, DetailsResponse, MakeSwapMsg, Coin, Height, TakeSwapMsg, ExecuteMsg, CancelSwapMsg, HeightOutput, InstantiateMsg, ListResponse, AtomicSwapOrder, QueryMsg } from "./Ics100.types";
import { Ics100QueryClient, Ics100Client } from "./Ics100.client";
export const ics100QueryKeys = {
  contract: ([{
    contract: "ics100"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...ics100QueryKeys.contract[0],
    address: contractAddress
  }] as const),
  list: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...ics100QueryKeys.address(contractAddress)[0],
    method: "list",
    args
  }] as const),
  listByDesiredTaker: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...ics100QueryKeys.address(contractAddress)[0],
    method: "list_by_desired_taker",
    args
  }] as const),
  listByMaker: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...ics100QueryKeys.address(contractAddress)[0],
    method: "list_by_maker",
    args
  }] as const),
  listByTaker: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...ics100QueryKeys.address(contractAddress)[0],
    method: "list_by_taker",
    args
  }] as const),
  details: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...ics100QueryKeys.address(contractAddress)[0],
    method: "details",
    args
  }] as const)
};
export const ics100Queries = {
  list: <TData = ListResponse,>({
    client,
    args,
    options
  }: Ics100ListQuery<TData>): UseQueryOptions<ListResponse, Error, TData> => ({
    queryKey: ics100QueryKeys.list(client?.contractAddress, args),
    queryFn: () => client ? client.list({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listByDesiredTaker: <TData = ListByDesiredTakerResponse,>({
    client,
    args,
    options
  }: Ics100ListByDesiredTakerQuery<TData>): UseQueryOptions<ListByDesiredTakerResponse, Error, TData> => ({
    queryKey: ics100QueryKeys.listByDesiredTaker(client?.contractAddress, args),
    queryFn: () => client ? client.listByDesiredTaker({
      desiredTaker: args.desiredTaker,
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listByMaker: <TData = ListByMakerResponse,>({
    client,
    args,
    options
  }: Ics100ListByMakerQuery<TData>): UseQueryOptions<ListByMakerResponse, Error, TData> => ({
    queryKey: ics100QueryKeys.listByMaker(client?.contractAddress, args),
    queryFn: () => client ? client.listByMaker({
      limit: args.limit,
      maker: args.maker,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listByTaker: <TData = ListByTakerResponse,>({
    client,
    args,
    options
  }: Ics100ListByTakerQuery<TData>): UseQueryOptions<ListByTakerResponse, Error, TData> => ({
    queryKey: ics100QueryKeys.listByTaker(client?.contractAddress, args),
    queryFn: () => client ? client.listByTaker({
      limit: args.limit,
      startAfter: args.startAfter,
      taker: args.taker
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  details: <TData = DetailsResponse,>({
    client,
    args,
    options
  }: Ics100DetailsQuery<TData>): UseQueryOptions<DetailsResponse, Error, TData> => ({
    queryKey: ics100QueryKeys.details(client?.contractAddress, args),
    queryFn: () => client ? client.details({
      id: args.id
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface Ics100ReactQuery<TResponse, TData = TResponse> {
  client: Ics100QueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface Ics100DetailsQuery<TData> extends Ics100ReactQuery<DetailsResponse, TData> {
  args: {
    id: string;
  };
}
export function useIcs100DetailsQuery<TData = DetailsResponse>({
  client,
  args,
  options
}: Ics100DetailsQuery<TData>) {
  return useQuery<DetailsResponse, Error, TData>(ics100QueryKeys.details(client?.contractAddress, args), () => client ? client.details({
    id: args.id
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Ics100ListByTakerQuery<TData> extends Ics100ReactQuery<ListByTakerResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
    taker: string;
  };
}
export function useIcs100ListByTakerQuery<TData = ListByTakerResponse>({
  client,
  args,
  options
}: Ics100ListByTakerQuery<TData>) {
  return useQuery<ListByTakerResponse, Error, TData>(ics100QueryKeys.listByTaker(client?.contractAddress, args), () => client ? client.listByTaker({
    limit: args.limit,
    startAfter: args.startAfter,
    taker: args.taker
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Ics100ListByMakerQuery<TData> extends Ics100ReactQuery<ListByMakerResponse, TData> {
  args: {
    limit?: number;
    maker: string;
    startAfter?: string;
  };
}
export function useIcs100ListByMakerQuery<TData = ListByMakerResponse>({
  client,
  args,
  options
}: Ics100ListByMakerQuery<TData>) {
  return useQuery<ListByMakerResponse, Error, TData>(ics100QueryKeys.listByMaker(client?.contractAddress, args), () => client ? client.listByMaker({
    limit: args.limit,
    maker: args.maker,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Ics100ListByDesiredTakerQuery<TData> extends Ics100ReactQuery<ListByDesiredTakerResponse, TData> {
  args: {
    desiredTaker: string;
    limit?: number;
    startAfter?: string;
  };
}
export function useIcs100ListByDesiredTakerQuery<TData = ListByDesiredTakerResponse>({
  client,
  args,
  options
}: Ics100ListByDesiredTakerQuery<TData>) {
  return useQuery<ListByDesiredTakerResponse, Error, TData>(ics100QueryKeys.listByDesiredTaker(client?.contractAddress, args), () => client ? client.listByDesiredTaker({
    desiredTaker: args.desiredTaker,
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Ics100ListQuery<TData> extends Ics100ReactQuery<ListResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useIcs100ListQuery<TData = ListResponse>({
  client,
  args,
  options
}: Ics100ListQuery<TData>) {
  return useQuery<ListResponse, Error, TData>(ics100QueryKeys.list(client?.contractAddress, args), () => client ? client.list({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Ics100CancelSwapMutation {
  client: Ics100Client;
  msg: {
    createTimestamp: string;
    makerAddress: string;
    orderId: string;
    timeoutHeight: HeightOutput;
    timeoutTimestamp: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useIcs100CancelSwapMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Ics100CancelSwapMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Ics100CancelSwapMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.cancelSwap(msg, fee, memo, funds), options);
}
export interface Ics100TakeSwapMutation {
  client: Ics100Client;
  msg: {
    createTimestamp: number;
    orderId: string;
    sellToken: Coin;
    takerAddress: string;
    takerReceivingAddress: string;
    timeoutHeight: Height;
    timeoutTimestamp: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useIcs100TakeSwapMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Ics100TakeSwapMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Ics100TakeSwapMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.takeSwap(msg, fee, memo, funds), options);
}
export interface Ics100MakeSwapMutation {
  client: Ics100Client;
  msg: {
    buyToken: Coin;
    createTimestamp: number;
    desiredTaker: string;
    expirationTimestamp: number;
    makerAddress: string;
    makerReceivingAddress: string;
    sellToken: Coin;
    sourceChannel: string;
    sourcePort: string;
    timeoutHeight: Height;
    timeoutTimestamp: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useIcs100MakeSwapMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Ics100MakeSwapMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Ics100MakeSwapMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.makeSwap(msg, fee, memo, funds), options);
}